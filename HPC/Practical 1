#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<omp.h>

using namespace std;

void parallelBFS(vector<vector<int>>&graph, int start)
{
    int n = graph.size();
    vector<bool> visited(n, false);

    queue<int> q;
    q.push(start);

    while(!q.empty())
    {
        int size = q.size();

        #pragma omp parallel for
        for (int i = 0; i < size; ++i)
        {
            int curr;
            #pragma omp critical
            {
                curr = q.front();
                q.pop();
            }

            if(!visited[curr])
            {
                visited[curr] = true;
                cout << curr << " ";

                for(int neighbor:graph[curr])
                {
                    if(!visited[neighbor])
                    {
                        #pragma omp critical
                        {
                            q.push(neighbor);
                        }
                    }
                }
            }
        }
    }
}

void parallelDFS(vector<vector<int>>&graph, vector<bool>visited, int curr)
{
    if(!visited[curr])
    {
        visited[curr] = true;
        cout << curr << " ";

        #pragma omp parallel for
        for (int i = 0; i < graph[curr].size(); ++i)
        {
            int neighbor = graph[curr][i];
            parallelDFS(graph, visited, neighbor);
        }
    }
}

int main() {
    int n, e;
    cout << "Enter number of nodes: ";
    cin >> n;

    cout << "Enter number of edges: ";
    cin >> e;

    vector<vector<int>> graph(n);

    cout << "Enter edges (u v) for undirected graph:\n";
    for (int i = 0; i < e; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    int start;
    cout << "Enter the start node for BFS and DFS: ";
    cin >> start;

    cout << "Parallel BFS: ";
    parallelBFS(graph, start);
    cout << endl;

    cout << "Parallel DFS: ";
    vector<bool> visited(n, false);
    parallelDFS(graph, visited, start);
    cout << endl;

    return 0;
}
